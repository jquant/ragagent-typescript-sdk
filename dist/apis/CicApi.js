"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Ragagent MCP Gateway
 * Advanced AI-powered conversation management system
 *
 * The version of the OpenAPI document: 0.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CicApi = void 0;
const runtime = require("../runtime");
/**
 *
 */
class CicApi extends runtime.BaseAPI {
    /**
     * Download the task results directly from local storage
     * Download Local File
     */
    downloadLocalFileCicSearchDownloadLocalTaskIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['taskId'] == null) {
                throw new runtime.RequiredError('taskId', 'Required parameter "taskId" was null or undefined when calling downloadLocalFileCicSearchDownloadLocalTaskIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/cic/search/download-local/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Download the task results directly from local storage
     * Download Local File
     */
    downloadLocalFileCicSearchDownloadLocalTaskIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.downloadLocalFileCicSearchDownloadLocalTaskIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a download URL for the task results from blob storage
     * Get Task Download Url
     */
    getTaskDownloadUrlCicSearchDownloadTaskIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['taskId'] == null) {
                throw new runtime.RequiredError('taskId', 'Required parameter "taskId" was null or undefined when calling getTaskDownloadUrlCicSearchDownloadTaskIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/cic/search/download/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Get a download URL for the task results from blob storage
     * Get Task Download Url
     */
    getTaskDownloadUrlCicSearchDownloadTaskIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTaskDownloadUrlCicSearchDownloadTaskIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the final results of a completed CIC processing task
     * Get Task Results
     */
    getTaskResultsCicSearchResultsTaskIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['taskId'] == null) {
                throw new runtime.RequiredError('taskId', 'Required parameter "taskId" was null or undefined when calling getTaskResultsCicSearchResultsTaskIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/cic/search/results/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Get the final results of a completed CIC processing task
     * Get Task Results
     */
    getTaskResultsCicSearchResultsTaskIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTaskResultsCicSearchResultsTaskIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the status of a CIC processing task
     * Get Task Status
     */
    getTaskStatusCicSearchStatusTaskIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['taskId'] == null) {
                throw new runtime.RequiredError('taskId', 'Required parameter "taskId" was null or undefined when calling getTaskStatusCicSearchStatusTaskIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/cic/search/status/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Get the status of a CIC processing task
     * Get Task Status
     */
    getTaskStatusCicSearchStatusTaskIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTaskStatusCicSearchStatusTaskIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Process CICs from a CSV or XLSX file through the CobranSaaS search and CSV update tools with parallelism.
     * Process Cic Search
     */
    processCicSearchCicSearchPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['file'] == null) {
                throw new runtime.RequiredError('file', 'Required parameter "file" was null or undefined when calling processCicSearchCicSearchPost().');
            }
            const queryParameters = {};
            if (requestParameters['cicColumn'] != null) {
                queryParameters['cic_column'] = requestParameters['cicColumn'];
            }
            if (requestParameters['maxCics'] != null) {
                queryParameters['max_cics'] = requestParameters['maxCics'];
            }
            if (requestParameters['parallelWorkers'] != null) {
                queryParameters['parallel_workers'] = requestParameters['parallelWorkers'];
            }
            if (requestParameters['serverUrl'] != null) {
                queryParameters['server_url'] = requestParameters['serverUrl'];
            }
            const headerParameters = {};
            const consumes = [
                { contentType: 'multipart/form-data' },
            ];
            // @ts-ignore: canConsumeForm may be unused
            const canConsumeForm = runtime.canConsumeForm(consumes);
            let formParams;
            let useForm = false;
            // use FormData to transmit files using content-type "multipart/form-data"
            useForm = canConsumeForm;
            if (useForm) {
                formParams = new FormData();
            }
            else {
                formParams = new URLSearchParams();
            }
            if (requestParameters['file'] != null) {
                formParams.append('file', requestParameters['file']);
            }
            const response = yield this.request({
                path: `/cic/search`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Process CICs from a CSV or XLSX file through the CobranSaaS search and CSV update tools with parallelism.
     * Process Cic Search
     */
    processCicSearchCicSearchPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.processCicSearchCicSearchPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.CicApi = CicApi;
