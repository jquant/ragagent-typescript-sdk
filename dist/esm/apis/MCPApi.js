/* tslint:disable */
/* eslint-disable */
/**
 * Ragagent MCP Gateway
 * Advanced AI-powered conversation management system
 *
 * The version of the OpenAPI document: 0.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
/**
 *
 */
export class MCPApi extends runtime.BaseAPI {
    /**
     * Return a consolidated specification of all tools exposed by the MCP server.  The response contains, for each registered tool:  * name – The public tool name. * description – Human-readable description. * parameters – JSON schema for the tool arguments (if available). * sample_input – An auto-generated example payload that conforms to the   parameters schema (best-effort).  This endpoint is *read-only* and does **not** proxy the request to the mounted MCP app – instead it inspects the in-memory ``mcp_server_instance`` that is initialised during application startup.  This keeps the dependency surface minimal and avoids additional network hops.
     * Get MCP server specification
     */
    getMcpServerSpecMcpServerSpecGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/mcp-server/spec`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Return a consolidated specification of all tools exposed by the MCP server.  The response contains, for each registered tool:  * name – The public tool name. * description – Human-readable description. * parameters – JSON schema for the tool arguments (if available). * sample_input – An auto-generated example payload that conforms to the   parameters schema (best-effort).  This endpoint is *read-only* and does **not** proxy the request to the mounted MCP app – instead it inspects the in-memory ``mcp_server_instance`` that is initialised during application startup.  This keeps the dependency surface minimal and avoids additional network hops.
     * Get MCP server specification
     */
    getMcpServerSpecMcpServerSpecGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMcpServerSpecMcpServerSpecGetRaw(initOverrides);
            return yield response.value();
        });
    }
}
