/* tslint:disable */
/* eslint-disable */
/**
 * Ragagent MCP Gateway
 * Advanced AI-powered conversation management system
 *
 * The version of the OpenAPI document: 0.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { ModelApiResponseFromJSON, ToolExecutionRequestToJSON, } from '../models/index';
/**
 *
 */
export class McpApiApi extends runtime.BaseAPI {
    /**
     * Execute a specific MCP tool  Executes the specified tool with the provided arguments and returns the result. The tool must be available in the MCP gateway\'s tool registry.
     * Execute Tool
     */
    executeToolApiV1ToolsToolNamePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['toolName'] == null) {
                throw new runtime.RequiredError('toolName', 'Required parameter "toolName" was null or undefined when calling executeToolApiV1ToolsToolNamePost().');
            }
            if (requestParameters['toolExecutionRequest'] == null) {
                throw new runtime.RequiredError('toolExecutionRequest', 'Required parameter "toolExecutionRequest" was null or undefined when calling executeToolApiV1ToolsToolNamePost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/api/v1/tools/{tool_name}`.replace(`{${"tool_name"}}`, encodeURIComponent(String(requestParameters['toolName']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ToolExecutionRequestToJSON(requestParameters['toolExecutionRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
        });
    }
    /**
     * Execute a specific MCP tool  Executes the specified tool with the provided arguments and returns the result. The tool must be available in the MCP gateway\'s tool registry.
     * Execute Tool
     */
    executeToolApiV1ToolsToolNamePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.executeToolApiV1ToolsToolNamePostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get OpenAPI specification  Returns the OpenAPI specification for the REST API endpoints.
     * Get Openapi Spec
     */
    getOpenapiSpecApiV1OpenapiGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/openapi`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
        });
    }
    /**
     * Get OpenAPI specification  Returns the OpenAPI specification for the REST API endpoints.
     * Get Openapi Spec
     */
    getOpenapiSpecApiV1OpenapiGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOpenapiSpecApiV1OpenapiGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get OpenRPC specification  Returns the OpenRPC specification for the MCP JSON-RPC interface.
     * Get Openrpc Spec
     */
    getOpenrpcSpecApiV1OpenrpcGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/openrpc`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
        });
    }
    /**
     * Get OpenRPC specification  Returns the OpenRPC specification for the MCP JSON-RPC interface.
     * Get Openrpc Spec
     */
    getOpenrpcSpecApiV1OpenrpcGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOpenrpcSpecApiV1OpenrpcGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List all available MCP tools  Returns a comprehensive list of all tools available through the MCP gateway, including tool names, descriptions, parameters schemas, and metadata.
     * List All Tools
     */
    listAllToolsApiV1ToolsListAllToolsPostRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/tools/list_all_tools`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
        });
    }
    /**
     * List all available MCP tools  Returns a comprehensive list of all tools available through the MCP gateway, including tool names, descriptions, parameters schemas, and metadata.
     * List All Tools
     */
    listAllToolsApiV1ToolsListAllToolsPost(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listAllToolsApiV1ToolsListAllToolsPostRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List all available MCP prompts  Returns a list of all prompts available through the MCP gateway, including prompt names, descriptions, and argument schemas.
     * List Prompts
     */
    listPromptsApiV1PromptsListGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/prompts/list`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
        });
    }
    /**
     * List all available MCP prompts  Returns a list of all prompts available through the MCP gateway, including prompt names, descriptions, and argument schemas.
     * List Prompts
     */
    listPromptsApiV1PromptsListGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listPromptsApiV1PromptsListGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List all available MCP resources  Returns a list of all resources available through the MCP gateway, including resource URIs, descriptions, and MIME types.
     * List Resources
     */
    listResourcesApiV1ResourcesListGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/resources/list`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
        });
    }
    /**
     * List all available MCP resources  Returns a list of all resources available through the MCP gateway, including resource URIs, descriptions, and MIME types.
     * List Resources
     */
    listResourcesApiV1ResourcesListGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listResourcesApiV1ResourcesListGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Health check for MCP API endpoints  Verifies that the MCP server and gateway router are properly initialized and can respond to basic requests.
     * Mcp Api Health
     */
    mcpApiHealthApiV1HealthGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/health`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
        });
    }
    /**
     * Health check for MCP API endpoints  Verifies that the MCP server and gateway router are properly initialized and can respond to basic requests.
     * Mcp Api Health
     */
    mcpApiHealthApiV1HealthGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mcpApiHealthApiV1HealthGetRaw(initOverrides);
            return yield response.value();
        });
    }
}
