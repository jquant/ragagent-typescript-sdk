/* tslint:disable */
/* eslint-disable */
/**
 * Ragagent MCP Gateway
 * Advanced AI-powered conversation management system
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  UIEventPayload,
  UIEventResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    UIEventPayloadFromJSON,
    UIEventPayloadToJSON,
    UIEventResponseFromJSON,
    UIEventResponseToJSON,
} from '../models/index';

export interface AgentDirectMessageApiAgentDirectMessagePostRequest {
    uIEventPayload: UIEventPayload;
}

/**
 * 
 */
export class AgentApi extends runtime.BaseAPI {

    /**
     * Receives a UI event, processes it with an agent, and returns the agent\'s response.
     *  Agent Direct Message
     */
    async agentDirectMessageApiAgentDirectMessagePostRaw(requestParameters: AgentDirectMessageApiAgentDirectMessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UIEventResponse>> {
        if (requestParameters['uIEventPayload'] == null) {
            throw new runtime.RequiredError(
                'uIEventPayload',
                'Required parameter "uIEventPayload" was null or undefined when calling agentDirectMessageApiAgentDirectMessagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/agent/direct_message`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UIEventPayloadToJSON(requestParameters['uIEventPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UIEventResponseFromJSON(jsonValue));
    }

    /**
     * Receives a UI event, processes it with an agent, and returns the agent\'s response.
     *  Agent Direct Message
     */
    async agentDirectMessageApiAgentDirectMessagePost(requestParameters: AgentDirectMessageApiAgentDirectMessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UIEventResponse> {
        const response = await this.agentDirectMessageApiAgentDirectMessagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List available agents for the frontend. Returns a simple list of agents compatible with ragauai frontend expectations.
     * List Agents
     */
    async listAgentsApiAgentAgentsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/agent/agents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List available agents for the frontend. Returns a simple list of agents compatible with ragauai frontend expectations.
     * List Agents
     */
    async listAgentsApiAgentAgentsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.listAgentsApiAgentAgentsGetRaw(initOverrides);
        return await response.value();
    }

}
