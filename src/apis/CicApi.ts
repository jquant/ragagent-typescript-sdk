/* tslint:disable */
/* eslint-disable */
/**
 * Ragagent MCP Gateway
 * Advanced AI-powered conversation management system
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface DownloadLocalFileCicSearchDownloadLocalTaskIdGetRequest {
    taskId: string;
}

export interface GetTaskDownloadUrlCicSearchDownloadTaskIdGetRequest {
    taskId: string;
}

export interface GetTaskResultsCicSearchResultsTaskIdGetRequest {
    taskId: string;
}

export interface GetTaskStatusCicSearchStatusTaskIdGetRequest {
    taskId: string;
}

export interface ProcessCicSearchCicSearchPostRequest {
    file: Blob;
    cicColumn?: string;
    maxCics?: number;
    parallelWorkers?: number;
    serverUrl?: string;
}

/**
 * 
 */
export class CicApi extends runtime.BaseAPI {

    /**
     * Download the task results directly from local storage
     * Download Local File
     */
    async downloadLocalFileCicSearchDownloadLocalTaskIdGetRaw(requestParameters: DownloadLocalFileCicSearchDownloadLocalTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling downloadLocalFileCicSearchDownloadLocalTaskIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cic/search/download-local/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download the task results directly from local storage
     * Download Local File
     */
    async downloadLocalFileCicSearchDownloadLocalTaskIdGet(requestParameters: DownloadLocalFileCicSearchDownloadLocalTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.downloadLocalFileCicSearchDownloadLocalTaskIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a download URL for the task results from blob storage
     * Get Task Download Url
     */
    async getTaskDownloadUrlCicSearchDownloadTaskIdGetRaw(requestParameters: GetTaskDownloadUrlCicSearchDownloadTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | null; }>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling getTaskDownloadUrlCicSearchDownloadTaskIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cic/search/download/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get a download URL for the task results from blob storage
     * Get Task Download Url
     */
    async getTaskDownloadUrlCicSearchDownloadTaskIdGet(requestParameters: GetTaskDownloadUrlCicSearchDownloadTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | null; }> {
        const response = await this.getTaskDownloadUrlCicSearchDownloadTaskIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the final results of a completed CIC processing task
     * Get Task Results
     */
    async getTaskResultsCicSearchResultsTaskIdGetRaw(requestParameters: GetTaskResultsCicSearchResultsTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling getTaskResultsCicSearchResultsTaskIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cic/search/results/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the final results of a completed CIC processing task
     * Get Task Results
     */
    async getTaskResultsCicSearchResultsTaskIdGet(requestParameters: GetTaskResultsCicSearchResultsTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.getTaskResultsCicSearchResultsTaskIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the status of a CIC processing task
     * Get Task Status
     */
    async getTaskStatusCicSearchStatusTaskIdGetRaw(requestParameters: GetTaskStatusCicSearchStatusTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling getTaskStatusCicSearchStatusTaskIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cic/search/status/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the status of a CIC processing task
     * Get Task Status
     */
    async getTaskStatusCicSearchStatusTaskIdGet(requestParameters: GetTaskStatusCicSearchStatusTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.getTaskStatusCicSearchStatusTaskIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Process CICs from a CSV or XLSX file through the CobranSaaS search and CSV update tools with parallelism.
     * Process Cic Search
     */
    async processCicSearchCicSearchPostRaw(requestParameters: ProcessCicSearchCicSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling processCicSearchCicSearchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cicColumn'] != null) {
            queryParameters['cic_column'] = requestParameters['cicColumn'];
        }

        if (requestParameters['maxCics'] != null) {
            queryParameters['max_cics'] = requestParameters['maxCics'];
        }

        if (requestParameters['parallelWorkers'] != null) {
            queryParameters['parallel_workers'] = requestParameters['parallelWorkers'];
        }

        if (requestParameters['serverUrl'] != null) {
            queryParameters['server_url'] = requestParameters['serverUrl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/cic/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Process CICs from a CSV or XLSX file through the CobranSaaS search and CSV update tools with parallelism.
     * Process Cic Search
     */
    async processCicSearchCicSearchPost(requestParameters: ProcessCicSearchCicSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.processCicSearchCicSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
