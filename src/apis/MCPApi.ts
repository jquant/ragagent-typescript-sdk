/* tslint:disable */
/* eslint-disable */
/**
 * Ragagent MCP Gateway
 * Advanced AI-powered conversation management system
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

/**
 * 
 */
export class MCPApi extends runtime.BaseAPI {

    /**
     * Return a consolidated specification of all tools exposed by the MCP server.  The response contains, for each registered tool:  * name – The public tool name. * description – Human-readable description. * parameters – JSON schema for the tool arguments (if available). * sample_input – An auto-generated example payload that conforms to the   parameters schema (best-effort).  This endpoint is *read-only* and does **not** proxy the request to the mounted MCP app – instead it inspects the in-memory ``mcp_server_instance`` that is initialised during application startup.  This keeps the dependency surface minimal and avoids additional network hops.
     * Get MCP server specification
     */
    async getMcpServerSpecMcpServerSpecGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mcp-server/spec`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Return a consolidated specification of all tools exposed by the MCP server.  The response contains, for each registered tool:  * name – The public tool name. * description – Human-readable description. * parameters – JSON schema for the tool arguments (if available). * sample_input – An auto-generated example payload that conforms to the   parameters schema (best-effort).  This endpoint is *read-only* and does **not** proxy the request to the mounted MCP app – instead it inspects the in-memory ``mcp_server_instance`` that is initialised during application startup.  This keeps the dependency surface minimal and avoids additional network hops.
     * Get MCP server specification
     */
    async getMcpServerSpecMcpServerSpecGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getMcpServerSpecMcpServerSpecGetRaw(initOverrides);
        return await response.value();
    }

}
