/* tslint:disable */
/* eslint-disable */
/**
 * Ragagent MCP Gateway
 * Advanced AI-powered conversation management system
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ModelApiResponse,
  ToolExecutionRequest,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
    ToolExecutionRequestFromJSON,
    ToolExecutionRequestToJSON,
} from '../models/index';

export interface ExecuteToolApiV1ToolsToolNamePostRequest {
    toolName: string;
    toolExecutionRequest: ToolExecutionRequest;
}

/**
 * 
 */
export class McpApiApi extends runtime.BaseAPI {

    /**
     * Execute a specific MCP tool  Executes the specified tool with the provided arguments and returns the result. The tool must be available in the MCP gateway\'s tool registry.
     * Execute Tool
     */
    async executeToolApiV1ToolsToolNamePostRaw(requestParameters: ExecuteToolApiV1ToolsToolNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters['toolName'] == null) {
            throw new runtime.RequiredError(
                'toolName',
                'Required parameter "toolName" was null or undefined when calling executeToolApiV1ToolsToolNamePost().'
            );
        }

        if (requestParameters['toolExecutionRequest'] == null) {
            throw new runtime.RequiredError(
                'toolExecutionRequest',
                'Required parameter "toolExecutionRequest" was null or undefined when calling executeToolApiV1ToolsToolNamePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/tools/{tool_name}`.replace(`{${"tool_name"}}`, encodeURIComponent(String(requestParameters['toolName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolExecutionRequestToJSON(requestParameters['toolExecutionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * Execute a specific MCP tool  Executes the specified tool with the provided arguments and returns the result. The tool must be available in the MCP gateway\'s tool registry.
     * Execute Tool
     */
    async executeToolApiV1ToolsToolNamePost(requestParameters: ExecuteToolApiV1ToolsToolNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.executeToolApiV1ToolsToolNamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get OpenAPI specification  Returns the OpenAPI specification for the REST API endpoints.
     * Get Openapi Spec
     */
    async getOpenapiSpecApiV1OpenapiGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/openapi`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * Get OpenAPI specification  Returns the OpenAPI specification for the REST API endpoints.
     * Get Openapi Spec
     */
    async getOpenapiSpecApiV1OpenapiGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.getOpenapiSpecApiV1OpenapiGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get OpenRPC specification  Returns the OpenRPC specification for the MCP JSON-RPC interface.
     * Get Openrpc Spec
     */
    async getOpenrpcSpecApiV1OpenrpcGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/openrpc`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * Get OpenRPC specification  Returns the OpenRPC specification for the MCP JSON-RPC interface.
     * Get Openrpc Spec
     */
    async getOpenrpcSpecApiV1OpenrpcGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.getOpenrpcSpecApiV1OpenrpcGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all available MCP tools  Returns a comprehensive list of all tools available through the MCP gateway, including tool names, descriptions, parameters schemas, and metadata.
     * List All Tools
     */
    async listAllToolsApiV1ToolsListAllToolsPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tools/list_all_tools`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * List all available MCP tools  Returns a comprehensive list of all tools available through the MCP gateway, including tool names, descriptions, parameters schemas, and metadata.
     * List All Tools
     */
    async listAllToolsApiV1ToolsListAllToolsPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.listAllToolsApiV1ToolsListAllToolsPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all available MCP prompts  Returns a list of all prompts available through the MCP gateway, including prompt names, descriptions, and argument schemas.
     * List Prompts
     */
    async listPromptsApiV1PromptsListGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/prompts/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * List all available MCP prompts  Returns a list of all prompts available through the MCP gateway, including prompt names, descriptions, and argument schemas.
     * List Prompts
     */
    async listPromptsApiV1PromptsListGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.listPromptsApiV1PromptsListGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all available MCP resources  Returns a list of all resources available through the MCP gateway, including resource URIs, descriptions, and MIME types.
     * List Resources
     */
    async listResourcesApiV1ResourcesListGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/resources/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * List all available MCP resources  Returns a list of all resources available through the MCP gateway, including resource URIs, descriptions, and MIME types.
     * List Resources
     */
    async listResourcesApiV1ResourcesListGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.listResourcesApiV1ResourcesListGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Health check for MCP API endpoints  Verifies that the MCP server and gateway router are properly initialized and can respond to basic requests.
     * Mcp Api Health
     */
    async mcpApiHealthApiV1HealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * Health check for MCP API endpoints  Verifies that the MCP server and gateway router are properly initialized and can respond to basic requests.
     * Mcp Api Health
     */
    async mcpApiHealthApiV1HealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.mcpApiHealthApiV1HealthGetRaw(initOverrides);
        return await response.value();
    }

}
