/* tslint:disable */
/* eslint-disable */
/**
 * Ragagent MCP Gateway
 * Advanced AI-powered conversation management system
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  UIEventRequest,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    UIEventRequestFromJSON,
    UIEventRequestToJSON,
} from '../models/index';

export interface HandleUiChatEventUiEventsChatPostRequest {
    uIEventRequest: UIEventRequest;
}

/**
 * 
 */
export class UiEventsApi extends runtime.BaseAPI {

    /**
     * Handle UI chat events via service
     * Handle Ui Chat Event
     */
    async handleUiChatEventUiEventsChatPostRaw(requestParameters: HandleUiChatEventUiEventsChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['uIEventRequest'] == null) {
            throw new runtime.RequiredError(
                'uIEventRequest',
                'Required parameter "uIEventRequest" was null or undefined when calling handleUiChatEventUiEventsChatPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ui-events/chat`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UIEventRequestToJSON(requestParameters['uIEventRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Handle UI chat events via service
     * Handle Ui Chat Event
     */
    async handleUiChatEventUiEventsChatPost(requestParameters: HandleUiChatEventUiEventsChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.handleUiChatEventUiEventsChatPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
