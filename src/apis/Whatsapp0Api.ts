/* tslint:disable */
/* eslint-disable */
/**
 * Ragagent MCP Gateway
 * Advanced AI-powered conversation management system
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface WebhookVerifyWhatsappWebhookGetRequest {
    hubMode?: string | null;
    hubVerifyToken?: string | null;
    hubChallenge?: string | null;
}

export interface WebhookWhatsappWebhookPostRequest {
    xHubSignature256?: string | null;
}

/**
 * 
 */
export class WhatsappApi extends runtime.BaseAPI {

    /**
     * Legacy flow endpoint - logs requests that should go to /flows/frequencia-premiada/webhook
     * Legacy Flow Endpoint
     */
    async legacyFlowEndpointWhatsappFlowPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/whatsapp/flow`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Legacy flow endpoint - logs requests that should go to /flows/frequencia-premiada/webhook
     * Legacy Flow Endpoint
     */
    async legacyFlowEndpointWhatsappFlowPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.legacyFlowEndpointWhatsappFlowPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Webhook verification endpoint for WhatsApp.
     * Webhook Verify
     */
    async webhookVerifyWhatsappWebhookGetRaw(requestParameters: WebhookVerifyWhatsappWebhookGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['hubMode'] != null) {
            queryParameters['hub_mode'] = requestParameters['hubMode'];
        }

        if (requestParameters['hubVerifyToken'] != null) {
            queryParameters['hub_verify_token'] = requestParameters['hubVerifyToken'];
        }

        if (requestParameters['hubChallenge'] != null) {
            queryParameters['hub_challenge'] = requestParameters['hubChallenge'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/whatsapp/webhook`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Webhook verification endpoint for WhatsApp.
     * Webhook Verify
     */
    async webhookVerifyWhatsappWebhookGet(requestParameters: WebhookVerifyWhatsappWebhookGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.webhookVerifyWhatsappWebhookGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Webhook endpoint to receive WhatsApp messages and flow data.
     * Webhook
     */
    async webhookWhatsappWebhookPostRaw(requestParameters: WebhookWhatsappWebhookPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xHubSignature256'] != null) {
            headerParameters['x-hub-signature-256'] = String(requestParameters['xHubSignature256']);
        }

        const response = await this.request({
            path: `/whatsapp/webhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Webhook endpoint to receive WhatsApp messages and flow data.
     * Webhook
     */
    async webhookWhatsappWebhookPost(requestParameters: WebhookWhatsappWebhookPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.webhookWhatsappWebhookPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
